@page "/todos"

@using System.ComponentModel.DataAnnotations

<h3>To-Do List</h3>

<div class="todo-container">
    <EditForm Model="newTodo" OnValidSubmit="AddTodo">
        <DataAnnotationsValidator />
        <div class="input-group mb-3">
            <InputText class="form-control" @bind-Value="newTodo.Title" placeholder="Add a new task..." />
            <button class="btn btn-primary" type="submit">Add</button>
        </div>
        <ValidationSummary />
    </EditForm>

    <ul class="list-group">
        @foreach (var todo in todos)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <div>
                    <input type="checkbox" class="form-check-input me-2" @bind="todo.IsCompleted" />
                    <span class="@(todo.IsCompleted ? "text-decoration-line-through text-muted" : "")">@todo.Title</span>
                </div>
                <div>
                    <button class="btn btn-sm btn-outline-secondary me-2" @onclick="() => EditTodo(todo)">Edit</button>
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTodo(todo)">Delete</button>
                </div>
            </li>
        }
    </ul>

    @if (editingTodo != null)
    {
        <div class="modal show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Task</h5>
                        <button type="button" class="btn-close" @onclick="CancelEdit"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="editingTodo" OnValidSubmit="SaveEdit">
                            <DataAnnotationsValidator />
                            <InputText class="form-control mb-3" @bind-Value="editingTodo.Title" />
                            <ValidationSummary />
                            <button class="btn btn-primary" type="submit">Save</button>
                            <button class="btn btn-secondary ms-2" type="button" @onclick="CancelEdit">Cancel</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<TodoItem> todos = new();
    private TodoItem newTodo = new();
    private TodoItem? editingTodo;

    private void AddTodo()
    {
        if (!string.IsNullOrWhiteSpace(newTodo.Title))
        {
            todos.Add(new TodoItem { Title = newTodo.Title });
            newTodo = new();
        }
    }

    private void DeleteTodo(TodoItem todo)
    {
        todos.Remove(todo);
    }

    private void ToggleCompleted(TodoItem todo)
    {
        todo.IsCompleted = !todo.IsCompleted;
    }

    private void EditTodo(TodoItem todo)
    {
        editingTodo = new TodoItem { Title = todo.Title, IsCompleted = todo.IsCompleted, Id = todo.Id };
    }

    private void SaveEdit()
    {
        var todo = todos.FirstOrDefault(t => t.Id == editingTodo?.Id);
        if (todo != null && editingTodo != null)
        {
            todo.Title = editingTodo.Title;
            todo.IsCompleted = editingTodo.IsCompleted;
        }
        editingTodo = null;
    }

    private void CancelEdit()
    {
        editingTodo = null;
    }

    public class TodoItem
    {
        public Guid Id { get; set; } = Guid.NewGuid();
        [Required]
        [StringLength(100, ErrorMessage = "Title is too long.")]
        public string Title { get; set; } = string.Empty;
        public bool IsCompleted { get; set; }
    }
}
